- provider: prometheus # this URI will generate metrics in Prometheus response format
  uri: /promcounter # do not use / for the uri; will lead to unexpected bad things; also make sure URIs are unique
  # every query to this URI needs to have the following headers
  headers:
    user: abcd
    pass: efgh
  # this URI will generate metrics for the following versions
  versions:
  - params: # params for version 1 should match the following; 
    - name: query
      # make value a literal scalar so that it can be used as a regex
      value: "sum\\(increase\\(revision_app_request_latencies_count\\{revision_name='live-revision'\\}\\[.*\\]\\)\\) or on\\(\\) vector\\(0\\)"
    metric:
      # metric returned for this version will be interval*rate
      # interval = time elapsed in seconds since the metrics-mock pod started
      type: counter
      rate: 2    
  - params: # params for version 1 should match the following; 
    - name: query
      # make value a literal scalar so that it can be used as a regex
      value: "sum\\(increase\\(revision_app_request_latencies_count\\{revision_name='dark-revision'\\}\\[.*\\]\\)\\) or on\\(\\) vector\\(0\\)"
    metric:
      # metric returned for this version will be interval*rate
      # interval = time elapsed in seconds since the metrics-mock pod started
      type: counter
      rate: 5.0    
- provider: prometheus # this URI will generate metrics in Prometheus response format
  uri: /promgauge # do not use / for the uri; will lead to unexpected bad things; also make sure URIs are unique
  # every query to this URI needs to have the following headers
  headers:
    user: abcd
    pass: efgh
  # this URI will generate metrics for the following versions
  versions:
  - params: # params for version 1 should match the following; 
    - name: query
      # make value a literal scalar so that it can be used as a regex
      value: "accuracy\\{model_name='dark'\\}\\[.*\\]"
    metric:
      # metric returned for this version will be (scaled and shifted) beta distributed
      # interval = time elapsed in seconds since the metrics-mock pod started
      type: gauge
      shift: 5
      multiplier: 10
      alpha: 2
      beta: 2
- provider: newrelic
  uri: /newrelic
  headers:
    X-Query-Key: abcd
  versions:
  - params:
    - name: nrql
      value: "SELECT sum\\(istio_requests_total\\) FROM Metric where destination_service_name='dark' SINCE .* MINUTES AGO"
    metric:
      # metric returned for this version will be interval*rate
      # interval = time elapsed in seconds since the metrics-mock pod started
      type: counter
      rate: 5.0   